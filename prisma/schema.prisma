// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Auth models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user") // user, admin
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  tests         Test[]      @relation("UserTests")
  testResults   TestResult[]
  bookmarks     Bookmark[]
  comments      Comment[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application models
model Test {
  id          String   @id @default(cuid())
  title       String
  description String?
  subject     String
  creatorId   String
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator     User        @relation("UserTests", fields: [creatorId], references: [id], onDelete: Cascade)
  questions   Question[]
  testResults TestResult[]
}

model Question {
  id         String   @id @default(cuid())
  testId     String
  question   String
  options    String
  answer     String
  explanation String?
  difficulty String   @default("medium")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  test       Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
}

model TestResult {
  id        String   @id @default(cuid())
  userId    String
  testId    String
  score     Int
  totalQuestions Int
  timeSpent Int      // Seconds spent on the test
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  test      Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
}

model Resource {
  id          String    @id @default(cuid())
  title       String
  description String?
  url         String
  type        String    // e.g., "article", "video", "book", etc.
  subject     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  bookmarks   Bookmark[]
}

model Bookmark {
  id         String   @id @default(cuid())
  userId     String
  resourceId String
  createdAt  DateTime @default(now())
  
  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  
  @@unique([userId, resourceId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  parentId  String?   // For nested comments
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
} 